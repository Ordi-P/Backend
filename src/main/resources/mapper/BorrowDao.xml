<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xdu.backend.Dao.BorrowDao">

    <insert id="insertBorrowRecord" parameterType="xdu.backend.pojo.Borrow">
        insert into borrow_record(book_id, user_id, borrow_date, return_date, returned, fine)
        values (#{bookID}, #{userID}, #{borrowDate}, #{returnDate}, #{returned}, #{fine})
    </insert>

    <select id="getUserCurrentBorrowNumber" parameterType="String" resultType="java.lang.Integer">
        select count(book_id)
        from borrow_record
        where user_id = #{userID} and returned = false
    </select>

    <select id="getUserCurrentBorrowList" parameterType="String" resultType="xdu.backend.pojo.Book">
        select *
        from book
        where book_id in (
            select book_id
            from borrow_record
            where user_id = #{userID}
        )
    </select>

    <select id="queryBorrowerByBookID" parameterType="java.lang.Long" resultType="String">
        select user_id
        from borrow_record
        where book_id = #{bookID}
    </select>

    <update id="updateBorrowRecord">
        update borrow_record
        set borrow_date = #{date}
        where book_id = #{bookID}
    </update>

    <resultMap id="borrowInfoResultMap" type="xdu.backend.vo.UserBorrowInfo">
        <id property="transactionID" column="borrow_tx_id"/>
        <result property="bookID" column="book_id" />
        <result property="userID" column="user_id" />
        <result property="bookName" column="book_name" />
        <result property="bookAuthor" column="book_author" />
        <result property="borrowDate" column="borrow_date" />
        <result property="returnDate" column="return_date" />
        <result property="returned" column="returned"/>
        <result property="fine" column="fine"/>
    </resultMap>

    <select id="queryUserCurrentBorrowInfoByUserID" resultMap="borrowInfoResultMap" parameterType="String">
        SELECT br.borrow_tx_id, br.book_id, br.user_id, b.book_name, b.book_author, br.borrow_date, br.return_date, br.returned, br.fine
        FROM borrow_record br
                 LEFT JOIN book b
                           ON br.book_id = b.book_id
        WHERE br.user_id = #{userID} and br.returned = false;
    </select>

    <select id="queryUserHistoryBorrowInfoByUserID" resultMap="borrowInfoResultMap" parameterType="String">
        SELECT br.borrow_tx_id, br.book_id, br.user_id, b.book_name, b.book_author, br.borrow_date, br.return_date, br.returned, br.fine
        FROM borrow_record br
        LEFT JOIN book b
            ON br.book_id = b.book_id
        WHERE br.user_id = #{userID} and br.returned = true;
    </select>

    <select id="queryBorrowDateByBookID" parameterType="java.lang.Long" resultType="java.sql.Date">
        select borrow_date
        from borrow_record
        where book_id = #{bookID}
    </select>

    <delete id="deleteBorrowRecordByBookId" parameterType="java.lang.Long">
        delete from borrow_record where book_id = #{bookID}
    </delete>

    <select id="queryBookNameByTxID" resultType="String" parameterType="Long">
        select book_name
        from book
        where book_id in (select book_id
                          from borrow_record
                          where borrow_tx_id = #{transactionID})
    </select>

    <select id="queryUserEmailByTxID" resultType="String" parameterType="Long">
        select email
        from user
        where user_id in (select user_id
                          from borrow_record
                          where borrow_tx_id = #{transacionID})
    </select>

    <select id="queryReturnDateByTransactionID" parameterType="String" resultType="java.sql.Date">
        select return_date
        from borrow_date
        where borrow_tx_id = #{transactionID}
    </select>

    <update id="updateReturnDateByTransactionID">
        update borrow_record
        set return_date = #{returnDate}
        where borrow_tx_id = #{transactionID}
    </update>

    <select id="queryBorrowerByTransactionID" parameterType="Long" resultType="String">
        select user_id
        from borrow_record
        where borrow_tx_id = #{transactionID}
    </select>

    <update id="updateBorrowRecordFine">
        update borrow_record set fine = fine + #{money} where book_id = #{bookID}
    </update>

    <select id="getNoReturnDateByUserIdAndBookId" resultType="java.sql.Date">
        select return_date from borrow_record where book_id = #{bookId} and user_id = #{userId} and returned = 0
    </select>

    <update id="updateReturnDateByBookIdAndUserId">
        update borrow_record set return_date = #{newDate}  where book_id = #{bookId} and user_id = #{userId} and returned = 0
    </update>

    <update id="updateReturnedByBookIdAndUserId">
        update borrow_record set returned = 1  where book_id = #{bookId} and user_id = #{userId} and returned = 0
    </update>

    <select id="getTotalUnpaidFines" resultType="int">
        SELECT
            sum( fine )
        FROM
            borrow_record
        WHERE
            returned = 0
    </select>

    <select id="getTotalFines" resultType="int">
        SELECT
            sum( fine )
        FROM
            borrow_record
        WHERE
            returned = 1
    </select>

    <select id="getTotalRegistered" resultType="java.lang.Integer">
        SELECT
            count(*)
        FROM
            `user`
    </select>
</mapper>
